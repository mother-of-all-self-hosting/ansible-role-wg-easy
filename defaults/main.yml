# SPDX-FileCopyrightText: 2023 - 2024 Nikita Chernyi
# SPDX-FileCopyrightText: 2023 - 2025 Slavi Pantaleev
# SPDX-FileCopyrightText: 2024 Sergio Durigan Junior
# SPDX-FileCopyrightText: 2025 MASH project contributors
# SPDX-FileCopyrightText: 2025 Suguru Hirahara
#
# SPDX-License-Identifier: AGPL-3.0-or-later

---
# Project source code URL: https://github.com/wg-easy/wg-easy

wg_easy_enabled: true

wg_easy_identifier: wg-easy
wg_easy_base_path: "/{{ wg_easy_identifier }}"
wg_easy_data_path: "{{ wg_easy_base_path }}/data"

# renovate: datasource=docker depName=ghcr.io/wg-easy/wg-easy
wg_easy_version: 15.1.0

wg_easy_uid: ''
wg_easy_gid: ''

wg_easy_scheme: https

# The hostname at which wg-easy is served.
wg_easy_hostname: ''

# The path at which wg-easy is served.
# This value must either be `/` or not end with a slash (e.g. `/wg-easy`).
wg_easy_path_prefix: /

wg_easy_container_image: "{{ wg_easy_container_image_registry_prefix }}wg-easy/wg-easy:{{ wg_easy_container_image_tag }}"
wg_easy_container_image_registry_prefix: "{{ wg_easy_container_image_registry_prefix_upstream }}"
wg_easy_container_image_registry_prefix_upstream: "{{ wg_easy_container_image_registry_prefix_upstream_default }}"
wg_easy_container_image_registry_prefix_upstream_default: ghcr.io/
wg_easy_container_image_tag: "{{ wg_easy_version }}"
wg_easy_container_image_force_pull: "{{ wg_easy_container_image.endswith(':latest') }}"

# Specifies how the container publishes its WireGuard port (e.g. 51820/udp)
#
# Takes an "<ip>:<port>" value (e.g. "127.0.0.1:51820"), just a port number or an empty string to not expose.
#
# Also see `wg_easy_environment_variables_additional_variable_init_port`.
wg_easy_container_wireguard_bind_port: "{{ wg_easy_environment_variables_additional_variable_init_port }}"

# Specifies how the container publishes its HTTP port (e.g. 8080/tcp)
#
# Takes an "<ip>:<port>" value (e.g. "127.0.0.1:8080"), just a port number or an empty string to not expose.
#
# Also see: `wg_easy_environment_variables_additional_variable_port` for configuring the port inside the container.
wg_easy_container_http_bind_port: ''

# The base container network. It will be auto-created by this role if it doesn't exist already.
wg_easy_container_network: "{{ wg_easy_identifier }}"

# A list of additional container networks that the container would be connected to.
# The role does not create these networks, so make sure they already exist.
# Use this to expose this container to another reverse proxy, which runs in a different container network.
wg_easy_container_additional_networks: "{{ wg_easy_container_additional_networks_auto + wg_easy_container_additional_networks_custom }}"
wg_easy_container_additional_networks_auto: []
wg_easy_container_additional_networks_custom: []

# A list of additional "volumes" to mount in the container.
# This list gets populated dynamically at runtime. You can provide a different default value,
# if you wish to mount your own files into the container.
# Contains definition objects like this: `{"type": "bind", "src": "/outside", "dst": "/inside", "options": "readonly"}.
# See the `--mount` documentation for the `docker run` command.
#
# Example:
# wg_easy_container_additional_volumes:
#   - type: bind
#     src: /path/on/the/host
#     dst: /data
#   - type: bind
#     src: /another-path/on/the/host
#     dst: /read-only
#     options: readonly
wg_easy_container_additional_volumes: []

# wg_easy_container_labels_traefik_enabled controls whether labels to assist a Traefik reverse-proxy will be attached to the container.
# See `../templates/labels.j2` for details.
#
# To inject your own other container labels, see `wg_easy_container_labels_additional_labels`.
wg_easy_container_labels_traefik_enabled: true
wg_easy_container_labels_traefik_docker_network: "{{ wg_easy_container_network }}"
wg_easy_container_labels_traefik_hostname: "{{ wg_easy_hostname }}"
# The path prefix must either be `/` or not end with a slash (e.g. `/wg-easy`).
wg_easy_container_labels_traefik_path_prefix: "{{ wg_easy_path_prefix }}"
wg_easy_container_labels_traefik_rule: "Host(`{{ wg_easy_container_labels_traefik_hostname }}`){% if wg_easy_container_labels_traefik_path_prefix != '/' %} && PathPrefix(`{{ wg_easy_container_labels_traefik_path_prefix }}`){% endif %}"
wg_easy_container_labels_traefik_priority: 0
wg_easy_container_labels_traefik_entrypoints: web-secure
wg_easy_container_labels_traefik_tls: "{{ wg_easy_container_labels_traefik_entrypoints != 'web' }}"
wg_easy_container_labels_traefik_tls_certResolver: default  # noqa var-naming

# Controls which additional headers to attach to all HTTP requests.
# To add your own custom request headers, use `wg_easy_container_labels_traefik_additional_response_headers_custom`
wg_easy_container_labels_traefik_additional_request_headers: "{{ wg_easy_container_labels_traefik_additional_request_headers_auto | combine(wg_easy_container_labels_traefik_additional_request_headers_custom) }}"
wg_easy_container_labels_traefik_additional_request_headers_auto: {}
wg_easy_container_labels_traefik_additional_request_headers_custom: {}

# Controls which additional headers to attach to all HTTP responses.
# To add your own custom response headers, use `wg_easy_container_labels_traefik_additional_response_headers_custom`
wg_easy_container_labels_traefik_additional_response_headers: "{{ wg_easy_container_labels_traefik_additional_response_headers_auto | combine(wg_easy_container_labels_traefik_additional_response_headers_custom) }}"
wg_easy_container_labels_traefik_additional_response_headers_auto: |
  {{
    {}
    | combine ({'X-XSS-Protection': wg_easy_http_header_xss_protection} if wg_easy_http_header_xss_protection else {})
    | combine ({'X-Content-Type-Options': wg_easy_http_header_content_type_options} if wg_easy_http_header_content_type_options else {})
    | combine ({'Content-Security-Policy': wg_easy_http_header_content_security_policy} if wg_easy_http_header_content_security_policy else {})
    | combine ({'Permission-Policy': wg_easy_http_header_content_permission_policy} if wg_easy_http_header_content_permission_policy else {})
    | combine ({'Strict-Transport-Security': wg_easy_http_header_strict_transport_security} if wg_easy_http_header_strict_transport_security and wg_easy_container_labels_traefik_tls else {})
  }}
wg_easy_container_labels_traefik_additional_response_headers_custom: {}

# wg_easy_container_labels_additional_labels contains a multiline string with additional labels to add to the container label file.
# See `../templates/labels.j2` for details.
#
# Example:
# wg_easy_container_labels_additional_labels: |
#   my.label=1
#   another.label="here"
wg_easy_container_labels_additional_labels: ''

# Specifies how often the container health-check will run.
#
# For Traefik based setups, it's important that the interval is short,
# because the interval value also specifies the "initial wait time".
# This is a Docker (moby) bug: https://github.com/moby/moby/issues/33410
# Without a successful healthcheck, Traefik will not register the service for reverse-proxying.
# Thus, the health interval determines the initial start-up time -- the smaller, the better.
#
# For non-Traefik setups, we use the default healthcheck interval (30s) to decrease overhead.
wg_easy_container_health_interval: "{{ '5s' if wg_easy_container_labels_traefik_enabled else '30s' }}"

# A list of extra arguments to pass to the container
wg_easy_container_extra_arguments: []

# Specifies the value of the `X-XSS-Protection` header
# Stops pages from loading when they detect reflected cross-site scripting (XSS) attacks.
#
# Learn more about it is here:
# - https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-XSS-Protection
# - https://portswigger.net/web-security/cross-site-scripting/reflected
wg_easy_http_header_xss_protection: "1; mode=block"

# Specifies the value of the `X-Content-Type-Options` header.
# See: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Content-Type-Options
wg_easy_http_header_content_type_options: nosniff

# Specifies the value of the `Content-Security-Policy` header.
# See: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy
wg_easy_http_header_content_security_policy: frame-ancestors 'self'

# Specifies the value of the `Permission-Policy` header.
# See: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Permission-Policy
wg_easy_http_header_content_permission_policy: "{{ 'interest-cohort=()' if wg_easy_floc_optout_enabled else '' }}"

# Specifies the value of the `Strict-Transport-Security` header.
# See: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Strict-Transport-Security
wg_easy_http_header_strict_transport_security: "max-age=31536000; includeSubDomains{{ '; preload' if wg_easy_hsts_preload_enabled else '' }}"

# Controls whether to send a "Permissions-Policy interest-cohort=();" header along with all responses
#
# Learn more about what it is here:
# - https://www.eff.org/deeplinks/2021/03/googles-floc-terrible-idea
# - https://paramdeo.com/blog/opting-your-website-out-of-googles-floc-network
# - https://amifloced.org/
#
# Of course, a better solution is to just stop using browsers (like Chrome), which participate in such tracking practices.
# See: `wg_easy_content_permission_policy`
wg_easy_floc_optout_enabled: true

# Controls if HSTS preloading is enabled
#
# In its strongest and recommended form, the [HSTS policy](https://www.chromium.org/hsts) includes all subdomains, and
# indicates a willingness to be "preloaded" into browsers:
# `Strict-Transport-Security: max-age=31536000; includeSubDomains; preload`
# For more information visit:
# - https://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security
# - https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Strict-Transport-Security
# - https://hstspreload.org/#opt-in
# See: `wg_easy_http_header_strict_transport_security`
wg_easy_hsts_preload_enabled: false

# List of systemd services that the WireGuard Easy systemd service depends on
wg_easy_systemd_required_services_list: "{{ wg_easy_systemd_required_services_list_default + wg_easy_systemd_required_services_list_auto + wg_easy_systemd_required_services_list_custom }}"
wg_easy_systemd_required_services_list_default: "{{ [devture_systemd_docker_base_docker_service_name] if devture_systemd_docker_base_docker_service_name else [] }}"
wg_easy_systemd_required_services_list_auto: []
wg_easy_systemd_required_services_list_custom: []

# List of systemd services that the WireGuard Easy systemd service wants
wg_easy_systemd_wanted_services_list: []

# Controls whether the `ip_tables` module is modprobed before starting the wg-easy container.
# This may be necessary on RedHat-based systems.
# See: https://github.com/wg-easy/wg-easy/issues/827#issuecomment-1936047794
wg_easy_systemd_modprobe_iptables_enabled: "{{ ansible_os_family == 'RedHat' }}"
wg_easy_systemd_modprobe_iptables_module_name: ip_tables

# Controls whether the `ip6_tables` module is modprobed before starting the wg-easy container.
# This may be necessary on certain systems.
wg_easy_systemd_modprobe_ip6tables_enabled: false
wg_easy_systemd_modprobe_ip6tables_module_name: ip6_tables

# Controls the `INIT_ENABLED` environment variable.
# Whether to enable the unattended setup logic.
# Without this, one needs to go through a manual setup step via the web UI.
wg_easy_environment_variables_additional_variable_init_enabled: true

# Controls the `INIT_HOST` environment variable, affecting the initial unattended setup.
# This specifies the hostname that clients need to use to connect to the WireGuard server.
# This value will ultimately end up in the `Peer.Endpoint` field of the WireGuard client configuration file.
#
# This may be an IPv4/IPv6 address or a hostname.
#
# If a hostname is used, it's recommended to configure both `A` and `AAAA` DNS records for it,
# so that it's reachable via both IPv4 and IPv6.
#
# Changing this subsequently won't have any effect.
wg_easy_environment_variables_additional_variable_init_host: "{{ wg_easy_hostname }}"

# Controls the `INIT_PORT` environment variable, affecting the initial unattended setup.
# This specifies the port that clients need to use to connect to the WireGuard server.
# Also points to the port actually used in the container (in case you've reconfigured it via the web UI).
# Changing this subsequently won't have any effect on reconfiguring wg-easy itself,
# but may still be useful to do to let the rest of the Ansible role know what the actual port is.
wg_easy_environment_variables_additional_variable_init_port: 51820

# Controls the `INIT_USERNAME` environment variable, affecting the initial unattended setup.
# The admin username for accessing the web UI.
# Changing this subsequently won't have any effect.
wg_easy_environment_variables_additional_variable_init_username: ""

# Controls the `INIT_PASSWORD` environment variable, affecting the initial unattended setup.
# The admin password for accessing the web UI.
# Changing this subsequently won't have any effect.
wg_easy_environment_variables_additional_variable_init_password: ""

# Controls the `INIT_DNS` environment variable, affecting the initial unattended setup.
# This specifies the DNS server(s) that clients will be pointed to.
# This value will ultimately end up in the `Interface.DNS` field of the WireGuard client configuration file.
#
# Changing this subsequently won't have any effect.
wg_easy_environment_variables_additional_variable_init_dns: "1.1.1.1,2606:4700:4700::1111"

# Controls the `INIT_IPV4_CIDR` environment variable, affecting the initial unattended setup.
# This specifies the IPv4 CIDR from which clients will be assigned their IPv4 addresses.
# Changing this subsequently won't have any effect.
wg_easy_environment_variables_additional_variable_init_ipv4_cidr: "10.8.0.0/24"

# Controls the `DISABLE_IPV6` environment variable, affecting whether IPv6 support should be disabled.
# Disabling IPv6 will disable the creation of the default IPv6 firewall rules and won't add IPv6 address to the interface and clients.
wg_easy_environment_variables_additional_variable_disable_ipv6: false

# Controls the `INIT_IPV6_CIDR` environment variable, affecting the initial unattended setup.
# This specifies the IPv6 CIDR from which clients will be assigned their IPv6 addresses.
#
# By default, most operating systems will prefer using IPv4 instead of IPv6 when making outgoing connections when their network interface is configured with a ULA.
# To get outgoing IPv6 working, you need to configure the network interface with a Global Unicast Address (GUA) that you own,
# or a GUA-like address - like the documentation-reserved prefix (`2001:db8::/32`).
#
# The default value here is a Global Unicast Address (GUA), which goes against the upstream defaults of wg-easy,
# which use Unique Local Address (ULA) value of `fdcc:ad94:bacf:61a4::cafe:0/112`.
# We do this, so that outgoing IPv6 connections will be preferred over IPv4 out of the box.
#
# If you can use your own GUA address here, we recommend doing that.
# For example, if you get `2001:555:5555:5555:/64` from your ISP for your network,
# you could assign something like `2001:555:5555:5555::0:cafe:0/112` for your 1st (`0`-th) wg-easy instance.
# If you run more wg-easy instances in your network, you could use `2001:555:5555:5555::1:cafe:0/112`,
# `2001:555:5555:5555::2:cafe:0/112`, etc. for them, so that they all have unique subnets.
#
# Changing this subsequently won't have any effect.
wg_easy_environment_variables_additional_variable_init_ipv6_cidr: "2001:db8::/32"

# Controls the `HOST` environment variable.
# The network interface to bind to when listening for incoming connections.
#
# Also see: `wg_easy_environment_variables_additional_variable_port`
wg_easy_environment_variables_additional_variable_host: 0.0.0.0

# Controls the `PORT` environment variable.
# The TCP port that the container process listens on for providing its web UI.
# Also see: `wg_easy_container_http_bind_port`
wg_easy_environment_variables_additional_variable_port: 8080

# Controls the `INSECURE` environment variable.
# Set this to `true` if you'll be accessing via HTTP.
wg_easy_environment_variables_additional_variable_insecure: "{{ wg_easy_container_labels_traefik_enabled and not wg_easy_container_labels_traefik_tls}}"

# Controls the `NUXT_APP_BASE_URL` environment variable.
# The base URL of the Nuxt.js application.
wg_easy_environment_variables_additional_variable_nuxt_app_base_url: "{{ wg_easy_path_prefix }}"

# Additional environment variables.
wg_easy_environment_variables_additional_variables: ''
